pipeline {
    agent any
    
    environment {
        MAVEN_HOME = tool 'Maven'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                script {
                    bat "${env.MAVEN_HOME}\\bin\\mvn clean compile"
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    bat "${env.MAVEN_HOME}\\bin\\mvn test"
                }
            }
        }
        
        stage('Deploy to Develop') {
    steps {
        script {
            // Verificar se há arquivos modificados
            def hasChanges = bat(script: 'git status --porcelain', returnStatus: true) == 0
            
            // Verificar se a branch local é a develop
            def isOnDevelop = bat(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim() == 'develop'
            
            if (hasChanges) {
                // Adicionar e cometer as alterações
                bat 'git checkout develop'
                bat 'git pull origin develop'  // Garantir que estamos atualizados com a branch remota develop
                bat 'git merge main --no-ff'  // Mesclar as alterações da branch main para a branch develop
                
                // Resolver possíveis conflitos automaticamente
                bat 'git checkout --ours .'    // Aceitar as alterações da branch develop em caso de conflito
                bat 'git add .'
                
                // Cometer a mesclagem
                bat 'git commit -m "Merge main into develop"'
                
                // Forçar o push das alterações para a branch remota
                bat 'git push origin develop --force'
            } else {
                echo "Nenhuma alteração para commit. Ignorando etapa de deploy."
            }
        }
    }
}

    }
}
